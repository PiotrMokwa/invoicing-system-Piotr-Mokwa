/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0/userguide/building_java_projects.html
 */

buildscript {
    ext {

        lambokVersion = '1.18.34'
        jacksonVersion = '2.11.1'
        spockSpringVersion = '2.4-M1-groovy-4.0'
        springVersion = '2.7.9' //Swager work with Spring version below 3.0 0. TODO change Swager to diferent aplication
        springDependencyManagmentVersion = '1.1.6'
        apachGroovyVersion = '4.0.21'
        junitVersion = '4.13.2'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '3.0.0'
        flywayVersion = '10.15.2'
        mongoVersion = '3.12.14'
    }
}

plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'java'
    id 'org.springframework.boot' version "${springVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagmentVersion}"
}
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-parameters'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(14)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
// SQLDatabase
    implementation "org.springframework.boot:spring-boot-starter-web"

    implementation "org.springframework.boot:spring-boot-starter-jdbc"

    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"

    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"

    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"

    runtimeOnly 'org.postgresql:postgresql:42.7.3'

    implementation 'org.flywaydb:flyway-core:8.5.13'

    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    // Spring implementation dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Spring Spock Test dependencies
    testImplementation "org.spockframework:spock-spring:${spockSpringVersion}"

    // Spring Core Test dependencies
    testImplementation "org.spockframework:spock-core:${spockSpringVersion}"

    // Use the latest Groovy version for Spock testing
    testImplementation "org.apache.groovy:groovy:${apachGroovyVersion}"

    //Use the awesome Spock testing and specification framework even with Java
    testImplementation 'junit:junit:4.13.2'
    //sql base test
    testImplementation 'com.h2database:h2:2.1.210'
    //lesson 13 jpa dependency
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //lesson 14 mongoDB
    implementation "org.mongodb:mongo-java-driver:${mongoVersion}"

    compileOnly "org.projectlombok:lombok:${lambokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lambokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lambokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lambokVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.session:spring-session-core'
    implementation "org.springframework.boot:spring-boot-gradle-plugin:${springVersion}"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}
application {
    // Define the main class for the application.
    mainClass = 'pl.futurecollars.invoicing.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
jacocoTestReport {
    dependsOn test
}
test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.projectDirectory.dir('jacocoHtml')
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = "BRANCH"
                minimum = 0.83
            }
        }
        rule {
            limit {
                counter = "LINE"
                minimum = 0.83
            }
        }
    }
}
def profile = "dev"
bootRun {
    args = ["--spring.profiles.active=" + profile]
}

task testWithFileDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'fileBase'
}

task testWithInMemoryDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'inMemoryBase'
}

task testWithSQLDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'SQLBase'
}
task testWithJpaDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa'
}
task testWithJpaFlywayDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa-flyway'
}

task testWithMongoDatabse(type: Test) {
    systemProperty 'spring.profiles.active', 'mongo'
}

check.dependsOn testWithFileDatabase
check.dependsOn testWithInMemoryDatabase
check.dependsOn testWithSQLDatabase
check.dependsOn testWithJpaDatabase
check.dependsOn testWithJpaFlywayDatabase
check.dependsOn testWithMongoDatabse

String osName = System.getProperty("os.name").toLowerCase()
if (osName.contains("mac")) {
    check.dependsOn testWithSQLDatabase
}
